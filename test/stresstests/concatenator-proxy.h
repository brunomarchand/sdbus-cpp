
/*
 * This file was automatically generated by sdbuscpp-xml2cpp; DO NOT EDIT!
 */

#ifndef __sdbuscpp__concatenator_proxy_h__proxy__H__
#define __sdbuscpp__concatenator_proxy_h__proxy__H__

#include <sdbus-c++/sdbus-c++.h>
#include <string>
#include <tuple>

namespace org {
namespace sdbuscpp {
namespace stresstest {

class concatenator_proxy
{
public:
    static constexpr const char* interfaceName = "org.sdbuscpp.stresstest.concatenator";

protected:
    concatenator_proxy(sdbus::IObjectProxy& object)
        : object_(object)
    {
        object_.uponSignal("concatenatedSignal").onInterface(interfaceName).call([this](const std::string& concatenatedString){ this->onConcatenatedSignal(concatenatedString); });
    }

    virtual void onConcatenatedSignal(const std::string& concatenatedString) = 0;

    virtual void onConcatenateReply(const std::string& result, const sdbus::Error* error) = 0;

public:
    void concatenate(const std::map<std::string, sdbus::Variant>& params)
    {
        object_.callMethodAsync("concatenate").onInterface(interfaceName).withArguments(params).uponReplyInvoke([this](const sdbus::Error* error, const std::string& result){ this->onConcatenateReply(result, error); });
    }

private:
    sdbus::IObjectProxy& object_;
};

}}} // namespaces

#endif
